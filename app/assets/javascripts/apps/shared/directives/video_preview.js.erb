/**
 * @ngdoc directive
 * @name VideoPreview
 * @module shared
 *
 * @description
 * This directive displays the video
 *
 * ### Usage
 * <video-preview video="video"></video-preview>
 */
(function() {
'use strict';

var controller = function(
  $scope, $window,
  ConnectionHelper
) {
  /**
   * Setup
   */
  $scope.consumer = ConnectionHelper.newConsumer('VideoPlayerChannel', 'video_player');
  $scope.senderId = null;
  $scope.video = null;

  $scope.currentState = {
    video: null,
    playing: false,
    paused: false
  }
};

controller.$inject = [
  '$scope', '$window',
  'ConnectionHelper'
];

var VideoPreview = function(
  $window,
  Video, VideoPreviewHelper) {
  return {
    restrict: 'E',
    scope: {
      playerId: '@',
      video: '=?',
      width: '=',
      height: '=',
      mute: '@',
      alwaysMute: '@'
    },
    controller: controller,
    template: '',
    link: function($scope, $element, $attrs, $controller) {
      /**
       * Setup
       */
      // Initialize the YT iframe api script
      var tag = document.createElement('script');
      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // When the iframe api is loaded,
      $window.onYouTubeIframeAPIReady = function() {
        VideoPreviewHelper.ready = true;
      };

      /**
       * Scope methods
       */
      // Creates a new YT player object
      $scope.newPlayer = function(preview_elem) {
        var params = {
          videoId: $scope.video.api_video_id,
          width: $scope.width,
          height: $scope.height,
          playerVars: {
            autoplay: 0,
            html5: 1,
            modesbranding: 1,
            iv_load_policy: 3,
            showinfo: 0,
            controls: 0,
            rel: 0,
            start: Math.floor($scope.video.start_time),
            end: Math.floor($scope.video.end_time),
            origin: 'http://localhost:3000'
          },
          events: {
            'onReady': function() {
              // Play the video
              $scope.player.playVideo();
            },
            'onStateChange': function(e) {
              $scope.player.getCurrentTime();

              // We're playing!
              if(e.data == YT.PlayerState.PLAYING) {
                $scope.currentState.playing = true;

                // Mute if requested
                if($scope.mute || $scope.alwaysMute) {
                  $scope.currentState.mute = true;
                  e.target.mute();
                };

                $scope.consumer.send({
                  video: $scope.video,
                  player_id: $scope.playerId,
                  sender_id: $scope.senderId,
                  state: $scope.currentState
                }, 'playing');
              }

              // We've stopped!
              if(e.data == YT.PlayerState.ENDED) {
                $scope.currentState.playing = false;
                $scope.currentState.mute = $scope.alwaysMute || $scope.mute;
                $scope.consumer.send({
                  video: $scope.video,
                  player_id: $scope.playerId,
                  sender_id: $scope.senderId,
                  state: $scope.currentState
                }, 'stop');
              }
            }
          }
        };
        $scope.player = new YT.Player(preview_elem, params);
      };

      /**
       * Event Handlers
       */
      $scope.consumer.subscribe(function(response) {
        var message = response.message;
        switch(response.action) {
          case 'client_connected':
          case 'registered_check':
            $scope.consumer.send({ player_id: $scope.playerId }, 'registered');
            break;
          case 'play':
            if(message.player_id == $scope.playerId) {
              // Stop the current player
              if($scope.player) {
                $scope.consumer.send({
                  player_id: $scope.playerId,
                  sender_id: $scope.senderId,
                  video: $scope.video
                }, 'stop');
              };

              $scope.video = message.video;

              // Allow override of start time in the message
              if(message.current_time) {
                $scope.video.start_time = message.current_time;
              }
              $scope.currentState.video = message.video;
              $scope.video = message.video;
              $scope.senderId = message.sender_id;

              // Clear out any existing players
              $element.children().remove();

              // Create the div to hold the video and give it a unique id
              var random_seed = 1 + Math.floor(Math.random() * 100000);
              $scope.preview_id = $scope.video.id + '-' + random_seed;
              var preview = $(
                '<div style="position:relative">' +
                '  <div class="prev-overlay" style="' +
                '    width: ' + $scope.width + 'px;' +
                '    height: ' + $scope.height + 'px;' +
                '  "></div>' +
                '  <div id="' + $scope.preview_id + '"></div>' +
                '</div>' +
                '<style>' +
                '  .prev-overlay {' +
                '    width: 100%;' +
                '    height: 100%;' +
                '    position: absolute;' +
                '    z-index: 1000000;' +
                '    background-color: transparent;' +
                '  }' +
                '</style>'
              );

              // Add new div for player
              $element.append(preview);

              // Create the player
              VideoPreviewHelper.waitForReady(function() {
                $scope.newPlayer($scope.preview_id);
              });
            };
            break;
          case 'pause':
            if(message.player_id == $scope.playerId) {
              $scope.currentState.paused = true;
              $scope.player.pauseVideo();

              // Notify that we've paused
              $scope.consumer.send({ player_id: $scope.playerId }, 'paused');
            };
            break;
          case 'unpause':
            if(message.player_id == $scope.playerId) {
              $scope.currentState.paused = false;
              $scope.player.playVideo();

              // Notify that we've unpaused
              $scope.consumer.send({ player_id: $scope.playerId }, 'unpaused');
            };
            break;
          case 'stop':
            if((message.player_id == 'all'
                && $scope.video
                && $scope.video.id == message.video.id)
              || message.player_id == $scope.playerId) {

              if($scope.player) {
                $scope.player.stopVideo();
                $scope.currentState = {
                  video: null,
                  playing: false,
                  paused: false,
                  mute: false
                }
              }

              // Clear out player
              $element.children().remove();

              // Notify that we've stopped
              $scope.consumer.send({
                video: $scope.video,
                player_id: $scope.playerId,
                sender_id: $scope.senderId,
                state: $scope.currentState
              }, 'stopped');
            }
            break;
          case 'mute':
            if(message.player_id == $scope.playerId && $scope.player) {
              $scope.currentState.mute = true;
              $scope.player.mute();
            }
            break;
          case 'unmute':
            if(!$scope.alwaysMute
              && message.player_id == $scope.playerId && $scope.player) {
              $scope.currentState.mute = false;
              $scope.player.unMute();
            }
            break;
          case 'set_time':
            if(message.player_id == $scope.playerId && $scope.player) {
              $scope.player.seekTo(message.time, true);
            }
            break;
          case 'get_current_state':
            if(message.player_id == $scope.playerId) {
              var state = $scope.getCurrentState(message);
              $scope.consumer.send(state, 'current_state');
            }
            break;
        }
      });

      $window.onunload = function() {
        $scope.consumer.send({
          player_id: $scope.playerId
        }, 'unregistered');
      };

      $scope.getCurrentState = function(message) {
        // If we don't have a getCurrentTime method,
        //  we don't have a valid player.
        var state = angular.extend({
          player_id: $scope.playerId,
          sender_id: message.sender_id,
        }, $scope.currentState);

        if($scope.player) {
          if($scope.player.getCurrentTime) {
            state.current_time = $scope.player.getCurrentTime();
          }
          if($scope.player.getDuration) {
            state.duration = $scope.player.getDuration();
          }
        }
        return state;
      };
    }
  };
};
VideoPreview.$inject = [
  '$window',
  'Video', 'VideoPreviewHelper'
]

// Service for storing shared states
var VideoPreviewHelper = function() {
  var self = this;

  // Determines if the YT Iframe Api has been loaded
  self.ready = false;

  // Can take a tiny bit before the api is ready
  self.waitForReady = function(callback, delay) {
    delay = delay || 200
    if(!self.ready) {
      setTimeout(self.waitForReady, delay, callback);
    } else {
      callback();
    }
  };
};
VideoPreviewHelper.$inject = [];

angular.module('shared')
       .service('VideoPreviewHelper', VideoPreviewHelper)
       .directive('videoPreview', VideoPreview);
}());
