/**
 * @ngdoc controller
 * @name VideosIndexCtrl
 *
 * @description Controller for the index page of the videos app
 */
(function() {
  "use strict";

var VideosIndexCtrl = function(
  $scope, $window,
  ConnectionHelper, Video, Show, Notice,
  show_data
  ) {
  /**
   * Setup
   */
  $scope.currentVideo = null;

  $scope.page = 1;
  $scope.per_page = 10000;
  $scope.retrieving = true;

  $scope.show = Show.build(show_data.data);

  $scope.videos = [];
  $scope.currentVideoOrder = [];

  $scope.broadcastId = 'broadcast-' + $scope.show.id;
  $scope.previewBroadcastId = $scope.broadcastId + '-' + Math.floor(Math.random() * 1000000);
  $scope.broadcastConsumer = ConnectionHelper.newConsumer('VideoPlayerChannel', {player_id: $scope.previewBroadcastId, broadcast_id: $scope.broadcastId});

  $scope.previewPlayerId = ConnectionHelper.getPlayerId('preview-' + $scope.show.id);
  $scope.previewConsumer = ConnectionHelper.newConsumer('VideoPlayerChannel', {player_id: $scope.previewPlayerId});

  // For monitoring changes to teh shoiw
  $scope.showConsumer = ConnectionHelper.newConsumer('ShowEventsChannel', {show_id: $scope.show.id });

  $scope.senderIds = {}
  $scope.state = {};
  $scope.broadcastState = {};

  // Start watching for live broadcasts
  ConnectionHelper.monitorBroadcasts($scope.broadcastId);

  /**
   * Watched variables
   */
  // If the broadcast window is closed, but we still have
  // a preview playing, force stop the video
  $scope.$watch(function() {
    return ConnectionHelper.broadcastReady($scope.broadcastId);
  }, function(newVal, oldVal) {
    if(newVal != oldVal && !newVal) {
      if($scope.state.video) {
        $scope.state = {
          playing: false,
          paused: false,
          video: null
        }
        $scope.broadcastConsumer.send({
          video: $scope.state.video,
          player_id: $scope.previewBroadcastId,
          broadcast_id: $scope.broadcastId,
        }, 'stop');
      }
    }
  });

  /**
   * Scope Methods
   */
  $scope.addVideo = function() {
    $scope.currentVideo = Video.build({show_id: $scope.show.id });
    $scope.showForm = true;
  };

  $scope.closeForm = function() {
    $scope.currentVideo = null;
    $scope.showForm = false;
  };

  $scope.editVideo = function(video) {
    if($scope.canManage(video)) {
      $scope.currentVideo = video;
      $scope.showForm = true;
    }
  };

  $scope.canManage = function(video) {
    return ($scope.currentUser.is_admin || video.creator_id == $scope.currentUser.id);
  };

  $scope.broadcastConsumer.onConfirmSubscription(function() {
    // Deletes a video from the queue
    $scope.destroy = function(video) {
      if($scope.canManage(video)) {
        if(confirm("Are you sure you want to delete this video from the queue?\nThis cannot be undone.")) {
          video.destroy().then(function() {
            // Remove video from current list
            var index = $scope.videos.indexOf(video);
            $scope.videos.splice(index, 1);

            $scope.broadcastConsumer.send({
              player_id: 'all'
            }, 'stop');
          }).catch();
        }
      }
    };
  });

  $scope.launchBroadcastPlayer = function() {
    $window.open('/broadcasts#/shows/' + $scope.show.id);
  };

  $scope.broadcastReady = function() {
    return ConnectionHelper.broadcastReady($scope.broadcastId);
  };

  // Look up list of videos
  $scope.queryVideos = function() {
    var params = {
      page: $scope.page,
      per_page: $scope.per_page,
      show_id: $scope.show.id,
      'q[s]': 'position ASC'
    };

    Video.query(params).then(function(response) {
      // If we don't have any videos, then
      // show the new video form
      if(response.data.length == 0) {
        $scope.showForm = true;
      } else {
        $scope.videos = [];
        angular.forEach(response.data, function(video) {
          var newVideo = Video.build(video);
          $scope.videos.push(newVideo);
          $scope.currentVideoOrder.push(newVideo.id);
        });
      }

      $scope.retrieving = false;
    }).catch(Notice.handleErrors);
  };
  // Make actual lookup
  $scope.queryVideos();

  $scope.shouldShowForm = function() {
    return $scope.videos.length == 0 || $scope.showForm;
  }

  // Haw to save sort order
  $scope.sortableOptions = {
    stop: function(e, ui) {
      // this callback has the changed model
      var newVideoOrder = $scope.videos.map(function(o) {
        return o.id;
      });

      if(newVideoOrder.join() != $scope.currentVideoOrder.join()) {
        $scope.videos.map(function(o, i) {
          o.position = i;
          o.save();
        });
      }
    }
  };

  // Show Events
  $scope.showConsumer.subscribe(function(response) {
    switch(response.action) {
      case 'update_video_list':
        $scope.queryVideos();
        break;
    }
  });

  // Preview Events
  $scope.doCurrentState = true;
  $scope.doPlaying = true;
  $scope.previewConsumer.subscribe(function(response) {
    var message = response.message;
    switch(response.action) {
      case 'playing':
        $scope.showPreview = true;
        $scope.$applyAsync();
        break;
      case 'stop':
        $scope.showPreview = false;
        $scope.$applyAsync();
        break;
      case 'stopped':
        $scope.showPreview = false;
        $scope.$applyAsync();
        break;
    }
  })

  $scope.broadcastConsumer.subscribe(function(response) {
    var message = response.message;
    switch(response.action) {
      case 'playing':
        $scope.state = message.state;
        break;
      case 'stopped':
        $scope.state = message.state;
        break;
    }
  }).then(function() {
    // Look up state of the associated player
    $scope.broadcastConsumer.send({
      player_id: $scope.broadcastId
    }, 'get_current_state');
  });

  // Broadcast events
  $scope.playVideo = function(video) {
    if($scope.broadcastReady()) {
      $scope.broadcastConsumer.send({
        video: video,
        player_id: $scope.previewBroadcastId,
        broadcast_id: $scope.broadcastId,
        sender_id: 'video-' + video.id
      }, 'play');
    }
  };

  $scope.stopVideo = function(video) {
    $scope.state = {
      playing: false,
      paused: false,
      video: null
    }
    $scope.broadcastConsumer.send({
      video: video,
      player_id: $scope.previewBroadcastId,
      broadcast_id: $scope.broadcastId,
      sender_id: 'video-' + video.id
    }, 'stop');
  };
};

VideosIndexCtrl.$inject = [
  '$scope', '$window',
  'ConnectionHelper', 'Video', 'Show', 'Notice',
  'show_data'
];

angular.module("YTBroadcastApp")
       .controller('VideosIndexCtrl', VideosIndexCtrl);
}());
