/**
 * @ngdoc controller
 * @name IndexCtrl
 *
 * @description Controller for the index page of the videos app
 */
(function() {
  "use strict";

var IndexCtrl = function(
  $scope, $location, $routeParams,
  VideoApp, Video, Show, Notice
  ) {
  /**
   * Setup
   */
  $scope.currentVideo = null;
  $scope.currentlyPlaying = {};

  $scope.page = 1;
  $scope.per_page = 10000;
  $scope.retrieving = true;


  $scope.show = Show.build({});
  $scope.showId = $routeParams.show_id;

  $scope.videos = [];
  $scope.currentVideoOrder = [];

  $scope.dispatcher = VideoApp.getDispatcher();
  $scope.channel = VideoApp.getChannel('video_player');
  $scope.playerId = VideoApp.getPlayerId('preview-' + $scope.showId);
  $scope.broadcastId = 'broadcast-' + $scope.showId;
  $scope.senderIds = {}

  $scope.playing = false;

  /**
   * Scope Methods
   */
  $scope.addVideo = function() {
    $scope.currentVideo = Video.build({show: $scope.showId });
    $scope.showForm = true;
  };

  $scope.closeForm = function() {
    $scope.currentVideo = null;
    $scope.showForm = false;
  };

  $scope.editVideo = function(video) {
    $scope.currentVideo = video;
    $scope.showForm = true;
  };

  // Deletes a video from the queue
  $scope.destroy = function(video) {
    if(confirm("Are you sure you want to delete this video from the queue?\nThis cannot be undone.")){
      video.destroy().then(function() {
        $scope.queryVideos();
      }).catch();
    }
  };

  $scope.isCurrentlyPlaying = function(video) {
    return $scope.currentlyPlaying && video.id == $scope.currentlyPlaying.id;
  };

  // Look up list of videos
  $scope.queryVideos = function() {
    if($scope.showId) {
      Show.find($scope.showId).then(function(response) {
        $scope.show = Show.build(response.data);
        var params = {
          page: $scope.page,
          per_page: $scope.per_page,
          show_id: $scope.showId,
          'q[s]': 'sort_order ASC'
        };

        Video.query(params).then(function(response) {
          // If we don't have any videos, then
          // show the new video form
          if(response.data.length == 0) {
            $scope.showForm = true;
          } else {
            $scope.videos = [];
            angular.forEach(response.data, function(video) {
              var newVideo = Video.build(video);
              $scope.videos.push(newVideo);
              $scope.currentVideoOrder.push(newVideo.id);
            });
          }

          $scope.retrieving = false;
        });
      }).catch(Notice.handleErrors);
    }
  };
  // Make actual lookup
  $scope.queryVideos();

  $scope.shouldShowForm = function() {
    return $scope.videos.length == 0 || $scope.showForm;
  }

  // Haw to save sort order
  $scope.sortableOptions = {
    stop: function(e, ui) {
      // this callback has the changed model
      var newVideoOrder = $scope.videos.map(function(o) {
        return o.id;
      });

      if(newVideoOrder.join() != $scope.currentVideoOrder.join()) {
        $scope.videos.map(function(o, i){
          o.sort_order = i;
          o.save();
        });
      }
    }
  };

  /**
   * Event Handlers
   */

  // Broadcast events
  $scope.playVideo = function(video){
    $scope.dispatcher.trigger('video_player.play', {
      video: video,
      player_id: $scope.broadcastId,
      sender_id: 'video-' + video.id
    });
  };

  $scope.stopVideo = function(video){
    $scope.dispatcher.trigger('video_player.stop', {
      video: video,
      player_id: $scope.broadcastId,
      sender_id: 'video-' + video.id
    });
  };

  $scope.channel.bind('playing', function(message) {
    if(message.player_id == $scope.broadcastId) {
      $scope.currentlyPlaying = message.video;
      $scope.$applyAsync();
    }
  });

  $scope.channel.bind('stopped', function(message) {
    if(message.player_id == $scope.broadcastId) {
      $scope.currentlyPlaying = null;
      $scope.$applyAsync();
    }
  });

  // Preview Events
  $scope.channel.bind('play', function(message) {
    if(message.player_id == $scope.playerId) {
      $scope.showPreview = true;
      $scope.$applyAsync();
    };
  });

  $scope.channel.bind('playing', function(message) {
    if(message.player_id == $scope.playerId) {
      $scope.playing = true;
      $scope.$applyAsync();
    };
  });

  $scope.channel.bind('stop', function(message) {
    if(message.player_id == $scope.playerId) {
      $scope.showPreview = false;
      $scope.$applyAsync();
    };
  });

  $scope.channel.bind('stopped', function(message) {
    if(message.player_id == $scope.playerId) {
      $scope.showPreview = false;
      $scope.playing = false;
      $scope.$applyAsync();
    };
  });

  // Other Events
  // Video list changed, need to update
  $scope.channel.bind('update_video_list', function(message) {
    if(message.show_id == $scope.showId) {
      $scope.queryVideos();
    }
  });
};

IndexCtrl.$inject = [
  '$scope', '$location', '$routeParams',
  'VideoApp', 'Video', 'Show', 'Notice'
];

angular.module("VideoApp")
       .controller('IndexCtrl', IndexCtrl);
}());
