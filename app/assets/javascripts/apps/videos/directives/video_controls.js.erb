/**
 * @ngdoc directive
 * @name VideoControls
 * @module YTBroadcastApp
 *
 * @description
 * This directive displays the video
 *
 * ### Usage
 * <video-controls></video-controls>
 */
(function() {
'use strict';

var controller = function(
  $scope, $interval,
  ConnectionHelper, Video
) {

  /**
   * Setup
   */
  $scope.consumer = ConnectionHelper.newConsumer('VideoPlayerChannel', 'video_player');

  // Allow option to control many players.
  // The first one will be reflected in the
  // state of the controls
  $scope.playerIds = $scope.playerId.split(',');

  // Unique value for this control
  $scope.senderId = $scope.playerIds[0] + '-' + Math.floor(Math.random() * 1000000);

  // Track the state of the slider
  $scope.sliding = false;

  // Current state of the primary player
  // Default values
  $scope.state = {
    playing: false,
    duration: 0,
    paused: false,
    video: null,
    mute: $scope.mute
  }

  /**
   * Scope Methods
   */
  // Wrapper for controlling which buttons are enabled
  $scope.enablePause = function() {
    return $scope.state.playing &&
      $scope.state.video &&
      !$scope.state.paused;
  };

  $scope.enablePlay = function() {
    return $scope.state.playing &&
      $scope.state.paused &&
      $scope.state.video != null;
  };

  $scope.enableStop = function() {
    return $scope.state.playing &&
      $scope.state.video;
  };

  $scope.enableSlider = function() {
    return $scope.state.playing &&
      $scope.state.video;
  };

  $scope.pause = function() {
    if($scope.enablePause()) {
      angular.forEach($scope.playerIds, function(playerId) {
        $scope.consumer.send({ player_id: playerId }, 'pause');
      });
    }
  };

  $scope.play = function() {
    if($scope.state.video) {
      angular.forEach($scope.playerIds, function(playerId) {
        $scope.consumer.send({ player_id: playerId }, 'unpause');
      });
    }
  };

  $scope.showPlay = function() {
    return $scope.state.paused;
  };

  $scope.showPaused = function() {
    return !$scope.state.paused;
  };

  $scope.stop = function() {
    if($scope.enableStop()) {
      angular.forEach($scope.playerIds, function(playerId) {
        $scope.consumer.send({ player_id: playerId }, 'stop');
      });
    }
  };

  $scope.mute = function() {
    $scope.toggleMute(true);
  };

  $scope.unMute = function() {
    $scope.toggleMute(false);
  };

  $scope.toggleMute = function(mute) {
    if($scope.state.playing) {
      angular.forEach($scope.playerIds, function(playerId) {
        var action = mute ? 'mute' : 'unmute';
        $scope.consumer.send({ player_id: playerId }, action);
      });
      $scope.$applyAsync();
    }
  };

  $scope.startSlide = function(t) {
    $scope.sliding = true;
  };

  $scope.endSlide = function(t) {
    $scope.sliding = false;
    $scope.state.current_time = t;

    angular.forEach($scope.playerIds, function(playerId) {
      $scope.consumer.send({
        video: $scope.state.video,
        player_id: playerId,
        time: t
      }, 'set_time');
    });
  };

  /**
   * Event Handlers
   */
  $scope.consumer.subscribe(function(response) {
    var message = response.message;
    switch(response.action) {
      case 'playing':
        if(message.player_id == $scope.playerIds[0]) {
          $scope.state.playing = true;
          $scope.state.video = message.video;
          $scope.$applyAsync();
        }
        break;
      case 'paused':
        if(message.player_id == $scope.playerIds[0]) {
          $scope.state.paused = true;
          $scope.$applyAsync();
        }
        break;
      case 'unpaused':
        if(message.player_id == $scope.playerIds[0]) {
          $scope.state.paused = false;
          $scope.$applyAsync();
        }
        break;
      case 'stopped':
        if(message.player_id == $scope.playerIds[0]) {
          // Reset controls state
          $scope.state = {
            playing: false,
            paused: false,
            video: null,
            duration: 0,
            current_time: 0,
          }
          $scope.$applyAsync();
        }
        break;
      case 'current_state':
        if(message.player_id == $scope.playerIds[0] &&
          message.sender_id == $scope.senderId) {

          $scope.state.playing = message.playing;
          $scope.state.paused = message.paused;
          $scope.state.video = message.video;
          $scope.state.mute = message.mute;

          if(!$scope.sliding) {
            $scope.state.duration = message.duration;
            $scope.state.current_time = message.current_time;
          }

          $scope.$applyAsync();
        }
        break;
    }
  });

  // Look up state of the associated player
  $scope.stateInterval = $interval(function() {
    $scope.consumer.send({
      player_id: $scope.playerIds[0],
      sender_id: $scope.senderId
    }, 'get_current_state');
  }, 2000);
};

controller.$inject = [
  '$scope', '$interval',
  'ConnectionHelper', 'Video'
];

var VideoControls = function() {
  return {
    restrict: 'E',
    scope: {
      playerId: '@'
    },
    controller: controller,
    templateUrl: '<%= asset_path("apps/videos/templates/video_controls.html") %>'
  };
};

angular.module('YTBroadcastApp')
       .directive('videoControls', VideoControls);
}());

