/**
 * @ngdoc directive
 * @name VideoControls
 * @module YTBroadcastApp
 *
 * @description
 * This directive displays the video
 *
 * ### Usage
 * <video-controls></video-controls>
 */
(function() {
'use strict';

var controller = function(
  $scope, $interval,
  ConnectionHelper, Video
) {

  /**
   * Setup
   */
  // Unique value for this control
  $scope.senderId = $scope.playerId + '-' + Math.floor(Math.random() * 1000000);
  $scope.consumer = ConnectionHelper.newConsumer('VideoPlayerChannel', { player_id: $scope.playerId, broadcast_id: $scope.broadcastId });

  // Track the state of the slider
  $scope.sliding = false;

  // Current state of the primary player
  // Default values
  $scope.state = {
    playing: false,
    duration: 0,
    paused: false,
    video: null,
    mute: $scope.mute
  }

  /**
   * Scope Methods
   */
  // Wrapper for controlling which buttons are enabled
  $scope.enablePause = function() {
    return $scope.state.playing &&
      $scope.state.video &&
      !$scope.state.paused;
  };

  $scope.enablePlay = function() {
    return $scope.state.playing &&
      $scope.state.paused &&
      $scope.state.video != null;
  };

  $scope.enableStop = function() {
    return $scope.state.playing &&
      $scope.state.video;
  };

  $scope.enableSlider = function() {
    return $scope.state.playing &&
      $scope.state.video;
  };

  $scope.pause = function() {
    if($scope.enablePause()) {
      $scope.consumer.send({
        player_id: $scope.playerId,
        broadcast_id: $scope.broadcastId
      }, 'pause');
    }
  };

  $scope.play = function() {
    if($scope.state.video) {
      $scope.consumer.send({
        player_id: $scope.playerId,
        broadcast_id: $scope.broadcastId
      }, 'unpause');
    }
  };

  $scope.showPlay = function() {
    return $scope.state.paused;
  };

  $scope.showPaused = function() {
    return !$scope.state.paused;
  };

  $scope.stop = function() {
    if($scope.enableStop()) {
      $scope.consumer.send({
        player_id: $scope.playerId,
        broadcast_id: $scope.broadcastId
      }, 'stop');
    }
  };

  $scope.mute = function() {
    $scope.toggleMute(true);
  };

  $scope.unMute = function() {
    $scope.toggleMute(false);
  };

  $scope.toggleMute = function(mute) {
    if($scope.state.playing) {
      var action = mute ? 'mute' : 'unmute';
      $scope.consumer.send({
        player_id: $scope.playerId,
        broadcast_id: $scope.broadcastId
      }, action);
      $scope.$applyAsync();
    }
  };

  $scope.startSlide = function(t) {
    $scope.sliding = true;
  };

  $scope.endSlide = function(t) {
    $scope.sliding = false;
    $scope.state.current_time = t;

    $scope.consumer.send({
      video: $scope.state.video,
      player_id: $scope.playerId,
      broadcast_id: $scope.broadcastId,
      time: t
    }, 'set_time');
  };

  /**
   * Event Handlers
   */
  $scope.consumer.subscribe(function(response) {
    var message = response.message;
    switch(response.action) {
      case 'playing':
        $scope.state.playing = true;
        $scope.state.video = message.video;
        $scope.state.start_time = message.video.start_time || 0
        $scope.state.duration = message.video.end_time || message.video.api_duration_seconds;
        $scope.$applyAsync();
        break;
      case 'paused':
        $scope.state.paused = true;
        $scope.$applyAsync();
        break;
      case 'unpaused':
        if(message.player_id == $scope.playerId) {
          $scope.state.paused = false;
          $scope.$applyAsync();
        }
        break;
      case 'stopped':
        // Reset controls state
        $scope.state = {
          playing: false,
          paused: false,
          video: null,
          duration: 0,
          current_time: 0,
        }
        $scope.$applyAsync();
        break;
      case 'current_state':
        $scope.state.playing = message.playing;
        $scope.state.paused = message.paused;
        $scope.state.video = message.video;
        $scope.state.mute = message.mute;

        if(!$scope.sliding) {
          $scope.state.duration = message.duration;
          $scope.state.current_time = message.current_time;
        }

        $scope.$applyAsync();
        break;
    }
  });

  // Kill interval when no longer connected to the websocket
  $scope.$watch(function() {
    return ConnectionHelper.wrangler.disconnected;
  }, function(newVal) {
    if(newVal) {
      $interval.cancel($scope.stateInterval);
    }
  });

  // Stop the interval if we leave the page
  $scope.$on('$locationChangeStart', function(event) {
    $interval.cancel($scope.stateInterval);
  })
};

controller.$inject = [
  '$scope', '$interval',
  'ConnectionHelper', 'Video'
];

var VideoControls = function() {
  return {
    restrict: 'E',
    scope: {
      playerId: '@',
      broadcastId: '@'
    },
    controller: controller,
    templateUrl: '<%= asset_path("apps/videos/templates/video_controls.html") %>'
  };
};

angular.module('YTBroadcastApp')
       .directive('videoControls', VideoControls);
}());

