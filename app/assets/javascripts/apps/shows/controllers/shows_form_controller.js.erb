/**
 * @ngdoc controller
 * @name ShowsFormCtrl
 *
 * @description Logic for adding/editing shows
 */
(function() {
  "use strict";

var ShowsFormCtrl = function(
  $scope, $routeParams, $location, $window,
  Show, User, Notice
  ) {

  /**
   * Setup
   */
  // Set a blank show as current show by default
  $scope.currentShow = Show.setCurrentShow(Show.build({}));
  $scope.hostSortableOptions = {
    connectWith: '.showHosts',
    stop: function() {
      // Assign list of hosts
      $scope.currentShow.hosts = $.map($scope.showHosts, function(user) {
        return user.id;
      }).join(',');
    }
  }
  $scope.availableHosts = [];
  $scope.showHosts = [];
  $scope.currentShow.hosts;

  // Grab show from server
  if($routeParams.show_id) {
    Show.find($routeParams.show_id).then(function(response) {
      var s = Show.setCurrentShow(Show.build(response.data));
      var hostArray = (s.hosts || '').split(',');

      // Get list of available hosts
      User.availableHosts().then(function(results) {
        angular.forEach(results.data, function(user) {
          var u = User.build(user);
          if(hostArray.indexOf(u.id.toString()) > -1) {
            $scope.showHosts.push(u);
          } else {
            $scope.availableHosts.push(u);
          }
        });
      });
    });
  } else {
    // New show
    User.availableHosts().then(function(results) {
      angular.forEach(results.data, function(user) {
        $scope.availableHosts.push(User.build(user));
      });
    });
  }

  /**
   * Watch variables
   */
  $scope.$watch(function() {
    return Show.currentShow
  }, function(newVal) {
    $scope.currentShow = newVal;
  });

  /**
   * Local methods
   */
  // Handle error response from server side
  var handleErrors = function(response) {
    Notice.handleErrors(response);
  };

  /**
   * Scope methods
   */
  $scope.cancel = function() {
    // Clear current show
    Show.resetCurrentShow();

    // Clear any errors
    Notice.reset();

    // Send to index
    $location.path('/shows');
  };

  // Deletes a show
  $scope.destroy = function() {
    if(confirm("Are you sure you want to delete this show?\nThis will remove all queue entries as well.")){
      $scope.currentShow.destroy().then(function() {
        Notice.setSuccesses('Successfully Deleted Show');
        Show.clearCurrentShow();
        $location.path('/shows');
      }).catch(handleErrors);
    }
  };

  // Shows the proper header prefix
  $scope.headingStr = function() {
    return $scope.currentShow.id ? 'Edit' : 'Create New';
  };

  // Saves the current show
  $scope.save = function() {
    // Check this before saving. After save it won't be new
    var newRecord = $scope.currentShow.isNewRecord();

    $scope.currentShow.save().then(function(response) {
      Show.resetCurrentShow();

      var show = Show.build(response.data);

      if(newRecord) {
        // Redirect back to index
        $window.location.href = '/#/shows/' + show.id + '/videos';
      } else {
        $location.path('/shows');
      }
    }).catch(handleErrors);
  };
};

ShowsFormCtrl.$inject = [
  '$scope', '$routeParams', '$location', '$window',
  'Show', 'User', 'Notice'
];

angular.module("YTBroadcastApp")
       .controller('ShowsFormCtrl', ShowsFormCtrl);
}());
