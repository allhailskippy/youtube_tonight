== About Youtube Tonight Broadcaster

Originally this app was going to be used to solve a technical issue for broadcasting YouTube videos. The idea being that several people would talk about specific YouTube videos as they're playing during a Google Hangout.

The issue is that a Google+ Hangout does not display any YouTube videos played during the hangout when saving as a YouTube video. So any playback that happened would have to be spliced in manuall afterwards.

This would have been far too much manual work, so I came up with a solution where all members of the hangout could add their own videos to an app, and that app would be capable of broadcasting its own video as another 'person' in the hangout.  Thus allowing the videos played to be recorded.

It is still necessary to have a component that will connect the playing video to the screen, however this app solves the issue of multiple users managing videos, and having those videos broadcast to a remote browser.

Unfortunately the project never fully materialized, but feel free to have a look over the code to get an idea of what I can do.

=== General Design

There are few core objects that work together to make this app work.

* *User*: There are 2 types of users on this site; Admin and Host. Admin users have access to pretty much everything, while host users should only have access to shows they belong to, and playlists that are theirs. Devise[https://github.com/plataformatec/devise] is used for handling login/logout features and {pundit}[https://github.com/elabs/pundit] is used for handling permissions.

* *Show*: This is how the videos to be shown are grouped. Each show should also have a defined list of people who will participate in the show, as well as an air date.

* *Playlist*: Pulled from YouTube and stored locally. YouTube removed the pagination from their playlists awhile back, so finding some videos from way back in time was pretty time consuming. Having them locally allows for the app to paginate these.

* *Video*: This table uses multiple table inheritance (MTI). Videos can either belong to a Show or a Playlist.

=== Expected Flow

1. When a user who has not logged in to the site first arrives, they are taken to a sign in page. This uses Google's Oauth2 authentication.
2. On a first successful login, the user is presented with a page that lets them know they will require authorization. 
3. An email is sent out at this time to all admins letting them know a new user has logged in.
4. The import process for that users playlists begin at this point as it can take some time before they are ready. This is done with Sidekiq (using Redis)
5. Once an admin authorizes this user, another email goes out. This time to the person who signed in; letting them know they can now use the site.
6. Users should visit the show they'd like to participate in and start adding videos to the queue. Preparing these in advance will make the show run smoother. Users can also control when they'd like the video to start and end, as well as being able to preview the videos ahead of time.
7. Launch a broadcast window. There really only needs to be one of these open, but the app allows for multiple. Ideally this will be running on a seperate computer.
8. From the video list, hit the broadcast button on the video you'd like to start playing. This will start the video on the broadcast window, as well as all of the preview windows for anyone who has the queue for the show open.

=== Technical Features

* *Ruby* *on* *Rails* *5* for the back end. Mostly used as a rest API, but does handle authentication/authorization of users as well as connecting with the Google (YouTube) API.
* *AngularJS* *1.6* for the front end. Most of the logic is handled in the front end. Also has some front end authorization for restricting access to pages.
* *Google* *YouTube* *v3* API integration
* *Websockets* for handling the control of the video players. This allows near real time control of the player.
* *Extensively* *tested* with model, controller and integration (Capybara) tests.

== How to set up the app
=== Prerequisites

HEROKU
  This app is designed to be run on Heroku. It's not 100% required, but it will
  make installation and deployment simpler. You can create a new (free) app at

    http://heroku.com

SENDGRID
  This is used for sending mail. There is an add-on for heroku. Sendgrid
  documentation can be found here: https://devcenter.heroku.com/articles/sendgrid

*Please* *note*: If you are configuring this now, please be sure to record your api username and password as they are not available to read after account creation.

REDIS
  A redis will need to be installed and running. To install this on a Mac, I
  suggest using homebrew following these redis installation instructions:

    https://medium.com/@petehouston/install-and-config-redis-on-mac-os-x-via-homebrew-eb8df9a4f298

  For production, I am using "Redis To Go" which is another heroku add-on.

POSTGRES
  I use the Postgres Database: add-on from Heroku:
  
    https://devcenter.heroku.com/articles/heroku-postgres-plans 

  The free version is limited to 10k rows, so for testing this out with a single
  user, you should be ok as long as you don't have too many videos in playlists
  as that's where a majority of the rows are currently coming from.

GOOGLE API
  You will need to ensure that you have a project created, and that the
  "YouTube Data API v3" and the "Google+ API" are both enabled. This can
  be done via the Google Console:
  
    https://console.developers.google.com 

  Be sure to whitelist your site here.
  
  If you're using the default settings locally, you will need to add

    http://localhost:5000 

  You will also need to add the callback url
  
    http://localhost:5000/users/auth/google_oauth2/callback
  
  These values will change based on your production environments settings

NewRelic

  This is used for monitoring the app and tracking any errors that occur.
  Create your account at:
    
    http://newrelic.com

RVM

  Ruby Version Manager (RVM).  Another not 100% mandatory, but highly
  recommended app is RVM. Youtube Broadcaster uses ruby 2.3.5, so you can either
  use RVM, or ensure that the ruby version is set to 2.3.5.
 
  Install instructions:
  
    https://rvm.io/rvm/install

BUNDLER

  This will allow you to install all necessary gems from the home directory.
  Install with:
    
    gem install bundler

  Documentation can be found at:

    http://bundler.io

=== Setup

First things first, you'll need to clone the repository. Since you're reading this, it's likely that you are already on the appropriate github page, or already have a local copy. But just in case, the link is available from {the repository}[https://github.com/allhailskippy/youtube_tonight]

Once cloned, you will need to configure the database. The file config/database.yml.example can be copied into config/database.yml and your values entered.

Install Gems. From your home directory run:
  bundle install

Build DB structure
  bundle exec rake db:migrate

Initialize data
  bundle exec rake db:seed

=== Environment Variables

To keep sensitive data out of the repository, all environment specific values for a local setup are stored in a .env file. For production data, these settins are stored on heroku's site under {config vars}[https://devcenter.heroku.com/articles/config-vars].

You will need the following values defined:

https://devcenter.heroku.com/articles/config-vars

REDIS_URL
  Will probably be redis://127.0.0.1:6379, but that will depend on your setup.
  Will be (obviously) different in production.

REDIS_PROVIDER
  Hard code this to REDIS_URL

SENDGRID_USERNAME / SENDGRID_PASSWORD
  This must be acquired during account creation. It does not seem to be available
  in any way after that.  From what I can tell of their system, the username will
  likely always be apikey, but please follow their documentation to be certain.
  
SYSTEM_ADMIN_ID
  This was created during the initialize data portion. Should be the only user in the users table.
  This SQL should be run in order to get the value for this entry:

    SELECT id FROM users WHERE name='System Admin' AND email = 'noreply@youtubetonight.com';

GOOGLE_CLIENT_ID / GOOGLE_CLIENT_SECRET
  Both are available via the Google API console. Listed in the credentials section
    
    https://console.developers.google.com/apis/credentials

WEBSOCKET_URL
  Hard coded based on your environment. For the development environment will likely be

    ws://localhost:5000/websocket

NEW_RELIC_LICENSE_KEY
  You will need to get this from the accounts page on NewRelic's site. Documentation can be found here:
    
    https://docs.newrelic.com/docs/accounts-partnerships/accounts/account-setup/license-key

SECRET_KEY_BASE
  This is unique to every environment. A value can be generated on the console by running:
    
    SecureRandom.hex(64)

== Start It Up

All going well, you should now be able to start the application up!

If you are using Heroku, to run the app locally, you need to run:
  
  heroku local

Once it's up, you can visit http://localhost:5000 to have a look.

Hit the sign in button and log in with your Google credentials.

Since at this point there are no admin users who are capable of authorizing your user, you'll have to manually add yourself as an admin.
To do this, you will need to access your database and find your User Id.

  SELECT id FROM users WHERE email = 'YOUR EMAIL ADDRESS';

This should give you the user id for the account you just logged in with.

You will then need to run 2 statements to be able to log in.

  UPDATE users SET requires_auth = false WHERE id = FOUND_USER_ID;

  INSERT INTO roles (user_id, title, created_at, updated_at) VALUES (FOUND_USER_ID, 'admin', NOW(), NOW());

At this point you should be good to go!
